# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api

frameworkVersion: "4"

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-associate-waf
  - serverless-offline
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - "@enterprise-cmcs/serverless-waf-plugin"

custom:
  project: "carts"
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  wafExcludeRules:
    awsCommon:
      - "SizeRestrictions_BODY"
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  accountId: ${AWS::AccountId}
  acsTableName: ${env:acsTableName, param:AcsTableName}
  fmapTableName: ${env:fmapTableName, param:FmapTableName}
  stateTableName: ${env:stateTableName, param:StateTableName}
  stateStatusTableName: ${env:stateStatusTableName, param:StateStatusTableName}
  sectionTableName: ${env:sectionTableName, param:SectionTableName}
  sectionBaseTableName: ${env:sectionBaseTableName, param:SectionBaseTableName}
  stageEnrollmentCountsTableName: ${env:stageEnrollmentCountsTableName, param:StageEnrollmentCountsTableName}
  webAclName: ${self:service}-${self:custom.stage}-webacl-waf
  uploadsTableName: ${env:uploadsTableName, param:UploadsTableName}
  docraptorApiKey: ${env:docraptorApiKey, ssm:/${self:custom.stage}/pdf/docraptorApiKey, ssm:/default/pdf/docraptorApiKey}
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  fiscalBucketEnvMap:
    production: production
    val: val
    main: main
    default: main
  fiscalBucketEnv: ${self:custom.fiscalBucketEnvMap.${self:custom.stage}, self:custom.fiscalBucketEnvMap.default}
provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource: !Sub arn:aws:s3:::uploads-${self:custom.fiscalBucketEnv}-carts-download-${AWS::AccountId}/*
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
          Resource: !Sub arn:aws:s3:::uploads-${self:custom.stage}-attachments-${AWS::AccountId}/*
  environment:
    acsTableName: ${self:custom.acsTableName}
    fiscalYearTemplateS3BucketName: ${env:fiscalYearTemplateBucketName, ssm:/configuration/${self:custom.stage}/s3/fiscalYearTemplateBucket, ssm:/configuration/default/s3/fiscalYearTemplateBucket, ""}
    fmapTableName: ${self:custom.fmapTableName}
    docraptorApiKey: ${self:custom.docraptorApiKey}
    stateTableName: ${self:custom.stateTableName}
    stateStatusTableName: ${self:custom.stateStatusTableName}
    sectionTableName: ${self:custom.sectionTableName}
    sectionBaseTableName: ${self:custom.sectionBaseTableName}
    stageEnrollmentCountsTableName: ${self:custom.stageEnrollmentCountsTableName}
    uploadsTableName: ${self:custom.uploadsTableName}
    uploadS3BucketName: !Sub ${env:attachmentsBucketName, "uploads-${self:custom.stage}-attachments-${AWS::AccountId}"}
    stage: ${self:custom.stage}

functions:
  getStates:
    handler: handlers/state/get.getStates
    events:
      - http:
          path: state
          method: get
          cors: true
          authorizer: aws_iam
  getEnrollmentCounts:
    handler: handlers/enrollmentCounts/get.getEnrollmentCounts
    events:
      - http:
          path: enrollment_counts/{year}/{state}
          method: get
          cors: true
          authorizer: aws_iam
  getFiscalYearTemplateLink:
    handler: handlers/fiscalYearTemplate/get.getFiscalYearTemplateLink
    events:
      - http:
          path: fiscalYearTemplate/{year}
          method: get
          cors: true
          authorizer: aws_iam
  getStateStatus:
    handler: handlers/stateStatus/get.getStateStatus
    events:
      - http:
          path: state_status
          method: get
          cors: true
          authorizer: aws_iam
  updateStateStatus:
    handler: handlers/stateStatus/update.updateStateStatus
    events:
      - http:
          path: state_status/{year}/{state}
          method: post
          cors: true
          authorizer: aws_iam
  getSections:
    handler: handlers/section/get.getSections
    events:
      - http:
          path: section/{year}/{state}
          method: get
          cors: true
          authorizer: aws_iam
  updateSections:
    handler: handlers/section/update.updateSections
    events:
      - http:
          path: save_report/{year}/{state}
          method: put
          cors: true
          authorizer: aws_iam
  generateFormTemplates:
    handler: handlers/formTemplates/post.post
    timeout: 30
    events:
      - http:
          path: formTemplates
          method: post
          cors: true
          authorizer: aws_iam
  postUpload:
    handler: handlers/uploads/createUploadPsUrl.psUpload
    events:
      - http:
          path: psUrlUpload/{year}/{state}
          method: post
          cors: true
          authorizer: aws_iam
  postDownload:
    handler: handlers/uploads/createDownloadPsUrl.getSignedFileUrl
    events:
      - http:
          path: psUrlDownload/{year}/{state}
          method: post
          cors: true
          authorizer: aws_iam
  deleteUpload:
    handler: handlers/uploads/delete.deleteUpload
    events:
      - http:
          path: uploads/{year}/{state}/{fileId}
          method: delete
          cors: true
          authorizer: aws_iam
  viewUploads:
    handler: handlers/uploads/viewUploaded.viewUploaded
    events:
      - http:
          path: uploads/{year}/{state}
          method: post
          cors: true
          authorizer: aws_iam
  printPdf:
    handler: handlers/printing/printPdf.print
    timeout: 30
    events:
      - http:
          path: print_pdf
          method: post
          cors: true
          authorizer: aws_iam
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
